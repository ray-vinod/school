// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Data;

namespace School.Migrations
{
    [DbContext(typeof(skulDbContext))]
    [Migration("20180719120020_addSectionInStudent")]
    partial class addSectionInStudent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("School.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Permanent")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("StudentId");

                    b.Property<int?>("TeacherId");

                    b.Property<string>("Temporary")
                        .HasMaxLength(30);

                    b.HasKey("AddressId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("School.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<int>("MobileNo");

                    b.Property<int>("Office");

                    b.Property<int>("Residence");

                    b.Property<int?>("StudentId");

                    b.Property<int?>("TeacherId");

                    b.HasKey("ContactId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("School.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("GradeId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("School.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("School.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GradeId");

                    b.Property<string>("SectionName")
                        .IsRequired();

                    b.HasKey("SectionId");

                    b.HasIndex("GradeId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("School.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<int>("FullMarks");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PassMarks");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("School.Models.ViewModels.StudentViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Grade");

                    b.Property<string>("Name");

                    b.Property<int>("RollNo");

                    b.HasKey("Id");

                    b.ToTable("StudentViewModel");
                });

            modelBuilder.Entity("School.Models.Student", b =>
                {
                    b.HasBaseType("School.Models.Person");

                    b.Property<int>("AddressId");

                    b.Property<int>("ContactId");

                    b.Property<int>("GradeId");

                    b.Property<Guid>("RegistrationNo");

                    b.Property<int>("RollNo");

                    b.Property<int>("SectionId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SectionId");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("School.Models.Teacher", b =>
                {
                    b.HasBaseType("School.Models.Person");

                    b.Property<int>("AddressId")
                        .HasColumnName("Teacher_AddressId");

                    b.Property<string>("AssignedSubject");

                    b.Property<int>("ContactId")
                        .HasColumnName("Teacher_ContactId");

                    b.Property<int?>("GradeId")
                        .HasColumnName("Teacher_GradeId");

                    b.Property<int>("position");

                    b.Property<int>("serviceType");

                    b.HasIndex("GradeId");

                    b.ToTable("Teacher");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("School.Models.Address", b =>
                {
                    b.HasOne("School.Models.Student", "Student")
                        .WithMany("Address")
                        .HasForeignKey("StudentId");

                    b.HasOne("School.Models.Teacher", "Teacher")
                        .WithMany("Address")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("School.Models.Contact", b =>
                {
                    b.HasOne("School.Models.Student", "Student")
                        .WithMany("Contact")
                        .HasForeignKey("StudentId");

                    b.HasOne("School.Models.Teacher", "Teacher")
                        .WithMany("Contact")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("School.Models.Section", b =>
                {
                    b.HasOne("School.Models.Grade", "Grade")
                        .WithMany("Sections")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("School.Models.Student", b =>
                {
                    b.HasOne("School.Models.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("School.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("School.Models.Teacher", b =>
                {
                    b.HasOne("School.Models.Grade")
                        .WithMany("Teachers")
                        .HasForeignKey("GradeId");
                });
#pragma warning restore 612, 618
        }
    }
}
